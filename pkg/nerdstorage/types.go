// Code generated by tutone: DO NOT EDIT
package nerdstorage

// NerdStorageScope - The access level of the NerdStorage data.
type NerdStorageScope string

var NerdStorageScopeTypes = struct {
	// Account-level storage.
	ACCOUNT NerdStorageScope
	// Actor-level storage.
	ACTOR NerdStorageScope
	// Entity-level storage.
	ENTITY NerdStorageScope
}{
	// Account-level storage.
	ACCOUNT: "ACCOUNT",
	// Actor-level storage.
	ACTOR: "ACTOR",
	// Entity-level storage.
	ENTITY: "ENTITY",
}

// NerdStorageActorScope -
type NerdStorageActorScope struct {
	// Nerdpack documents are stored inside a collection.
	// A collection can be thought of as a key-value storage where each document is one of these key-value pairs.
	//
	// To use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.
	Collection []NerdStorageCollectionMember `json:"collection,omitempty"`
	// A Nerdpack document is formed by an identifier (called documentId) and a set of data associated with it.
	//
	// To use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.
	Document NerdStorageDocument `json:"document,omitempty"`
}

// NerdStorageCollectionMember -
type NerdStorageCollectionMember struct {
	// The NerdStorage document.
	Document NerdStorageDocument `json:"document,omitempty"`
	// The documentId.
	ID string `json:"id,omitempty"`
}

// NerdStorageEntityScope -
type NerdStorageEntityScope struct {
	//
	Collection []NerdStorageCollectionMember `json:"collection,omitempty"`
	//
	Document NerdStorageDocument `json:"document,omitempty"`
}

// NerdStorageScopeInput - The data access level and ID for the selected scope.
type NerdStorageScopeInput struct {
	// The ID for the selected scope.
	ID string `json:"id"`
	// The NerdStorage data access level.
	Name NerdStorageScope `json:"name"`
}

// NerdStorageDocument - This scalar represents a NerdStorage document.
type NerdStorageDocument string
